// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;


// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonSRX rightDriveTalon;
private WPI_TalonSRX rightDriveTalon2;
private MotorControllerGroup rightDrive;
private WPI_TalonSRX leftDriveTalon;
private WPI_TalonSRX leftDriveTalon2;
private MotorControllerGroup leftDrive;
private DifferentialDrive drive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        rightDriveTalon = new WPI_TalonSRX(2); //bottom talon?
        rightDriveTalon2 = new WPI_TalonSRX(1); //top talon?
        rightDrive = new MotorControllerGroup(rightDriveTalon, rightDriveTalon2  );
           //addChild("Right Drive",rightDrive);
 

        leftDriveTalon = new WPI_TalonSRX(4); //bottom talon?
        leftDriveTalon2 = new WPI_TalonSRX(3); //top talon?
        leftDrive = new MotorControllerGroup(leftDriveTalon, leftDriveTalon2  );
           //addChild("Left Drive",leftDrive);
 

        drive = new DifferentialDrive(rightDrive, leftDrive  );
           //addChild("Drive",drive);
        drive.setSafetyEnabled(true);
        drive.setExpiration(0.1);
        drive.setMaxOutput(1.0);
 


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        drive.tankDrive(1.0,1.0);

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    public void drive(double left, double right) {
        drive.tankDrive(left, right * -1.0);
    }
    
    public void fullStop(){
        drive.tankDrive(0.0,0.0);
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

