// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import javax.lang.model.util.ElementScanner6;

import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.subsystems.*;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class AutonomousCommand extends CommandBase {
    private final Intake m_intake;
    private final Shooter m_shooter;
    private final DriveTrain m_DriveTrain;
    private boolean firing;
    private int count;

    /*
    //stuff for limelight
    NetworkTable table = NetworkTableInstance.getDefault().getTable("limelight");
    NetworkTableEntry tx = table.getEntry("tx");
    NetworkTableEntry ty = table.getEntry("ty");
    NetworkTableEntry ta = table.getEntry("ta");
    */
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    //private final AutonomousCommand m_subsystem; 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    //AutonomousCommand subsystem
    public AutonomousCommand(DriveTrain subsystem, Intake launchBall, Shooter kobyBryant) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        m_DriveTrain = subsystem;
        addRequirements(m_DriveTrain);
        m_intake = launchBall;
        addRequirements(m_intake);
        m_shooter = kobyBryant;
        addRequirements(m_shooter);    

        


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() { 
        /*
        firing = true;
        count = 0; 
        m_shooter.ShootPower(0.0);*/
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        /*
        for(int i = 0; i<7500; i++){
            m_DriveTrain.drive(1.0,1.0);
        }
        while(firing == true){
            m_shooter.ShootPower(0.90);
            count++;
            if(count > 8500)
                m_intake.inPower(1.0);
            else if(count > 9300){
                firing = false;
                continue;
            }
        }
        m_shooter.ShootPower(0.0); */
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        /*
        firing = false;
        count = 0;
        m_shooter.ShootPower(0.0);*/
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
